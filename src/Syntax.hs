{-# LANGUAGE GADTs #-}

module Syntax (
    Literal (LUnit, LBool, LInt, LFloat),
    UnaryOp (Not, Neg, FNeg),
    RelationBinOp (Eq, Le, Ge, Ne, Lt, Gt),
    IntBinOp (Add, Sub, Mul, Div),
    FloatBinOp (FAdd, FSub, FMul, FDiv),
    BinaryOp (RelationOp, IntOp, FloatOp),
    Ident (UserDefined, CompilerGenerated, ExternalIdent),
    Pattern (PUnit, PVar, PRec, PTuple),
    ParsedExpr (PGuard, pExp),
    ResolvedExpr (RGuard, rExp),
    RawIdent (RawIdent),
    KExpr,
    Expr (Const, Unary, Binary, If, Let, Var, App, Tuple, ArrayCreate, Get, Put),
    getExprState,
) where

import Data.Text (Text)
import Text.Megaparsec.Pos (SourcePos)

data Literal
    = LUnit
    | LBool Bool
    | LInt Int
    | LFloat Float
    deriving (Show, Eq)

data UnaryOp
    = Not
    | Neg
    | FNeg
    deriving (Show, Eq)

data RelationBinOp = Eq | Le | Ge | Ne | Lt | Gt deriving (Show, Eq)
data IntBinOp = Add | Sub | Mul | Div deriving (Show, Eq)
data FloatBinOp = FAdd | FSub | FMul | FDiv deriving (Show, Eq)
data BinaryOp
    = RelationOp RelationBinOp
    | IntOp IntBinOp
    | FloatOp FloatBinOp
    deriving (Show, Eq)

data RawIdent
    = RawIdent SourcePos Text
    deriving (Show, Eq)

data Ident
    = -- | An identifier after name resolution.
      UserDefined SourcePos Text
    | -- | An identifier generated by the compiler.
      CompilerGenerated Text
    | -- | An identifier that is used to refer to an external item.
      ExternalIdent Text
    deriving (Show, Eq)

data Pattern identTy
    = PUnit
    | PVar identTy
    | PRec identTy [identTy]
    | PTuple [identTy]
    deriving (Show, Eq)

{- | The type of an expression after parsing.
PGuard is used for avoiding invalid recursive type definition.
-}
newtype ParsedExpr = PGuard {pExp :: Expr SourcePos RawIdent ParsedExpr}
    deriving (Show, Eq)

{- | The type of an expression after name resolution.
RGuard is used for avoiding invalid recursive type definition.
-}
newtype ResolvedExpr = RGuard {rExp :: Expr SourcePos Ident ResolvedExpr}
    deriving (Show, Eq)

type KExpr = Expr SourcePos Ident Ident

data Expr state identTy operandTy where
    Const :: state -> Literal -> Expr state a b
    Unary :: state -> UnaryOp -> operandTy -> Expr state a operandTy
    Binary :: state -> BinaryOp -> operandTy -> operandTy -> Expr state a operandTy
    If :: state -> operandTy -> Expr state identTy operandTy -> Expr state identTy operandTy -> Expr state identTy operandTy
    Let :: state -> Pattern identTy -> Expr state identTy operandTy -> Expr state identTy operandTy -> Expr state identTy operandTy
    Var :: state -> identTy -> Expr state identTy b
    App :: state -> operandTy -> [operandTy] -> Expr state a operandTy
    Tuple :: state -> [operandTy] -> Expr state a operandTy
    ArrayCreate :: state -> operandTy -> operandTy -> Expr state a operandTy
    Get :: state -> operandTy -> operandTy -> Expr state a operandTy
    Put :: state -> operandTy -> operandTy -> operandTy -> Expr state a operandTy
    deriving (Show, Eq)

getExprState :: Expr state identTy operandTy -> state
getExprState (Const state _) = state
getExprState (Unary state _ _) = state
getExprState (Binary state _ _ _) = state
getExprState (If state _ _ _) = state
getExprState (Let state _ _ _) = state
getExprState (Var state _) = state
getExprState (App state _ _) = state
getExprState (Tuple state _) = state
getExprState (ArrayCreate state _ _) = state
getExprState (Get state _ _) = state
getExprState (Put state _ _ _) = state
